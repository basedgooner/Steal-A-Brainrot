loadstring(
    game:HttpGet(
        'https://raw.githubusercontent.com/basedgooner/AntiKick/refs/heads/main/Antikick'
    )
)()
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = 'Steal',
    LoadingTitle = 'Steal',
    LoadingSubtitle = 'by You',
    Theme = 'DarkBlue',
    ConfigurationSaving = { Enabled = true, FileName = 'StealConfig' },
})

local StealTab = Window:CreateTab('Steal', 'shield-off')
local MovementTab = Window:CreateTab('Movement', 'move')
local VisualsTab = Window:CreateTab('Visuals', 'eye')
local ShopTab = Window:CreateTab('Shop', 'shopping-cart')

local INTERVAL = 0.25
local GEN = {
    ['Noobini Pizzanini'] = 1,
    ['Lirilì Larilà'] = 3,
    ['Tim Cheese'] = 5,
    ['Fluriflura'] = 7,
    ['Talpa Di Fero'] = 9,
    ['Svinina Bombardino'] = 10,
    ['Pipi Kiwi'] = 13,
    ['Trippi Troppi'] = 15,
    ['Tung Tung Tung Sahur'] = 25,
    ['Gangster Footera'] = 30,
    ['Boneca Ambalabu'] = 40,
    ['Ta Ta Ta Ta Sahur'] = 55,
    ['Tric Trac Baraboom'] = 65,
    ['Cappuccino Assassino'] = 75,
    ['Brr Brr Patapim'] = 100,
    ['Trulimero Trulicina'] = 125,
    ['Bambini Crostini'] = 135,
    ['Bananita Dolphinita'] = 150,
    ['Perochello Lemonchello'] = 160,
    ['Brri Brri Bicus Dicus Bombicus'] = 175,
    ['Chimpanzini Bananini'] = 300,
    ['Burbaloni Loliloli'] = 200,
    ['Rhino Toasterino'] = 2150,
    ['Chef Crabracadabra'] = 600,
    ['Glorbo Fruttodrillo'] = 750,
    ['Blueberrinni Octopusini'] = 1000,
    ['Frigo Camelo'] = 1250,
    ['Orangutini Ananassini'] = 1750,
    ['Bombardiro Crocodilo'] = 2500,
    ['Bombombini Gusini'] = 5000,
    ['Cocofanto Elefanto'] = 10000,
    ['Girafa Celestre'] = 20000,
    ['Gattatino Nyanino'] = 25000,
    ['Matteo'] = 50000,
    ['Tralalero Tralala'] = 50000,
    ['Odin Din Din Dun'] = 75000,
    ['Trenostruzzo Turbo 3000'] = 150000,
    ['La Vacca Saturno Saturnita'] = 250000,
    ['Los Tralaleritos'] = 500000,
    ['Graipuss Medussi'] = 1000000,
    ['La Grande Combinasion'] = 10000000,
}

local Players = game:GetService('Players')
local TweenService = game:GetService('TweenService')
local PathfindingService = game:GetService('PathfindingService')
local MOVING_FOLDER = workspace:WaitForChild('RenderedMovingAnimals')
local TAG_HL, TAG_GUI = 'TopGenHighlight', 'TopGenBillboard'
local PLAYER_HL = 'PlayerESP_HL'

local RAINBOW_COLORS = {
    Color3.fromRGB(255, 0, 0),
    Color3.fromRGB(255, 127, 0),
    Color3.fromRGB(255, 255, 0),
    Color3.fromRGB(0, 255, 0),
    Color3.fromRGB(0, 255, 255),
    Color3.fromRGB(0, 0, 255),
    Color3.fromRGB(255, 0, 255),
    Color3.fromRGB(255, 0, 127),
}

local function formatNumber(n)
    return tostring(n):reverse():gsub('%d%d%d', '%1,'):reverse():gsub('^,', '')
end
local function clearVisuals()
    for _, m in ipairs(workspace:GetChildren()) do
        if m:FindFirstChild(TAG_HL) then
            m[TAG_HL]:Destroy()
        end
        if m:FindFirstChild(TAG_GUI) then
            m[TAG_GUI]:Destroy()
        end
    end
end
local function isBasePet(m)
    return m:IsA('Model') and GEN[m.Name] and not MOVING_FOLDER:IsAncestorOf(m)
end
local function createSmoothRainbowTween(o, p)
    local ti = TweenInfo.new(
        2,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.InOut,
        -1,
        false
    )
    local cv = Instance.new('Color3Value')
    cv.Value = RAINBOW_COLORS[1]
    cv:GetPropertyChangedSignal('Value'):Connect(function()
        o[p] = cv.Value
    end)
    TweenService
        :Create(cv, ti, { Value = RAINBOW_COLORS[#RAINBOW_COLORS] })
        :Play()
end

local function attachVisuals(m, g)
    local root = m:FindFirstChild('RootPart')
        or m:FindFirstChildWhichIsA('BasePart')
    if not root then
        return
    end
    local hl = Instance.new('Highlight')
    hl.Name = TAG_HL
    hl.Adornee = m
    hl.FillTransparency = 0.1
    hl.OutlineTransparency = 0
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = m
    createSmoothRainbowTween(hl, 'FillColor')
    createSmoothRainbowTween(hl, 'OutlineColor')
    local gui = Instance.new('BillboardGui')
    gui.Name = TAG_GUI
    gui.Adornee = root
    gui.AlwaysOnTop = true
    gui.Size = UDim2.new(0, 400, 0, 80)
    gui.StudsOffset = Vector3.new(0, 4, 0)
    gui.Parent = m
    local n = Instance.new('TextLabel')
    n.Size = UDim2.new(1, 0, 0.5, 0)
    n.Position = UDim2.new(0.5, 0, 0.35, 0)
    n.AnchorPoint = Vector2.new(0.5, 0.5)
    n.BackgroundTransparency = 1
    n.Font = Enum.Font.GothamBlack
    n.TextSize = 22
    n.Text = m.Name:upper()
    n.TextXAlignment = Enum.TextXAlignment.Center
    local ns = Instance.new('UIStroke')
    ns.Thickness = 4.5
    ns.Color = Color3.new(0, 0, 0)
    ns.Parent = n
    local nso = Instance.new('UIStroke')
    nso.Thickness = 5.5
    nso.Color = Color3.new(1, 1, 1)
    nso.Parent = n
    local gL = Instance.new('TextLabel')
    gL.Size = UDim2.new(1, 0, 0.5, 0)
    gL.Position = UDim2.new(0.5, 0, 0.75, 0)
    gL.AnchorPoint = Vector2.new(0.5, 0.5)
    gL.BackgroundTransparency = 1
    gL.Font = Enum.Font.GothamBlack
    gL.TextSize = 32
    gL.Text = '$' .. formatNumber(g) .. '/s'
    gL.TextXAlignment = Enum.TextXAlignment.Center
    local gs = Instance.new('UIStroke')
    gs.Thickness = 6
    gs.Color = Color3.new(0, 0, 0)
    gs.Parent = gL
    local gso = Instance.new('UIStroke')
    gso.Thickness = 7
    gso.Color = Color3.new(1, 1, 1)
    gso.Parent = gL
    n.Parent = gui
    gL.Parent = gui
    createSmoothRainbowTween(n, 'TextColor3')
    createSmoothRainbowTween(gL, 'TextColor3')
end

local espEnabled = false
local function espLoop()
    while espEnabled do
        local highest, bestGen = nil, -1
        for _, m in ipairs(workspace:GetChildren()) do
            if isBasePet(m) then
                local g = GEN[m.Name]
                if g and g > bestGen then
                    bestGen = g
                    highest = m
                end
            end
        end
        clearVisuals()
        if highest then
            attachVisuals(highest, bestGen)
        end
        task.wait(INTERVAL)
    end
    clearVisuals()
end

local function enableESP()
    if espEnabled then
        return
    end
    espEnabled = true
    task.spawn(espLoop)
end
local function disableESP()
    espEnabled = false
end

local playerEspEnabled = false
local playerConns = {}
local function addOutline(char)
    if not char or char:FindFirstChild(PLAYER_HL) then
        return
    end
    local hl = Instance.new('Highlight')
    hl.Name = PLAYER_HL
    hl.Adornee = char
    hl.FillTransparency = 0.8
    hl.OutlineTransparency = 0.05
    hl.OutlineColor = Color3.new(1, 1, 1)
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = char
end
local function enablePlayerESP()
    if playerEspEnabled then
        return
    end
    playerEspEnabled = true
    for _, p in ipairs(Players:GetPlayers()) do
        addOutline(p.Character)
        p.CharacterAdded:Connect(addOutline)
        table.insert(playerConns, p.CharacterAdded:Connect(addOutline))
    end
    table.insert(
        playerConns,
        Players.PlayerAdded:Connect(function(plr)
            table.insert(playerConns, plr.CharacterAdded:Connect(addOutline))
            addOutline(plr.Character)
        end)
    )
end
local function disablePlayerESP()
    playerEspEnabled = false
    for _, p in ipairs(Players:GetPlayers()) do
        if p.Character and p.Character:FindFirstChild(PLAYER_HL) then
            p.Character[PLAYER_HL]:Destroy()
        end
    end
    for _, c in ipairs(playerConns) do
        pcall(function()
            c:Disconnect()
        end)
    end
    table.clear(playerConns)
end

local bypassSpeedEnabled = false
local bypassSpeedValue = 105
local speedCoilName = 'Speed Coil'
local player = Players.LocalPlayer
local PlotController = require(game:GetService("ReplicatedStorage").Controllers.PlotController)
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild('Humanoid')
local backpack = player:WaitForChild('Backpack')
local userInputService = game:GetService('UserInputService')
local runService = game:GetService('RunService')

local coilEquipped = false

local function equipAndUnequipCoil()
    local coilTool = backpack:FindFirstChild(speedCoilName) or character:FindFirstChild(speedCoilName)
    if coilTool then
        coilTool.Parent = character
        task.wait(0.05)
        coilTool.Parent = backpack
    end
end

local keys = {}
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        keys[input.KeyCode] = true
    end
end)
userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Keyboard then
        keys[input.KeyCode] = false
    end
end)

local hrp = character:WaitForChild('HumanoidRootPart')

runService.RenderStepped:Connect(function(dt)
    if not bypassSpeedEnabled then return end
    local cam = workspace.CurrentCamera
    local moveVector = Vector3.new(0, 0, 0)
    if keys[Enum.KeyCode.W] then moveVector += Vector3.new(0, 0, -1) end
    if keys[Enum.KeyCode.S] then moveVector += Vector3.new(0, 0, 1) end
    if keys[Enum.KeyCode.A] then moveVector += Vector3.new(-1, 0, 0) end
    if keys[Enum.KeyCode.D] then moveVector += Vector3.new(1, 0, 0) end
    if moveVector.Magnitude == 0 then return end

    local direction = cam.CFrame:VectorToWorldSpace(moveVector).Unit
    local movePos = hrp.Position + direction * bypassSpeedValue * dt

    if not coilEquipped then
        coilEquipped = true
        spawn(equipAndUnequipCoil)
    end

    local smoothPos = hrp.Position:Lerp(movePos, 0.1)
    local flatDir = Vector3.new(direction.X, 0, direction.Z).Unit
    local look = smoothPos + (flatDir.Magnitude > 0 and flatDir or hrp.CFrame.LookVector)
    hrp.CFrame = CFrame.lookAt(smoothPos, look)
end)

local function onCharacterAdded(char)
    humanoid = char:WaitForChild('Humanoid')
    hrp = char:WaitForChild('HumanoidRootPart')

    humanoid.Died:Connect(function()
        if bypassSpeedEnabled then
            task.delay(1, function()
                if bypassSpeedEnabled then
                    character = player.Character
                    if character then
                        hrp = character:FindFirstChild('HumanoidRootPart')
                        if hrp then
                            spawn(equipAndUnequipCoil)
                        end
                    end
                end
            end)
        end
    end)
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end

local tweenSpeed = 20

local function tweenToPosition(targetPos, speed)
    speed = speed or getTweenSpeed()
    local hrp = player.Character and player.Character:FindFirstChild('HumanoidRootPart')
    if not hrp then return end
    local dist = (targetPos - hrp.Position).Magnitude
    local duration = dist / speed
    local tweenInfo = TweenInfo.new(
        duration,
        Enum.EasingStyle.Sine,
        Enum.EasingDirection.InOut
    )
    local adjusted = targetPos + Vector3.new(0, 3, 0)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(adjusted)})

    tween:Play()
    tween.Completed:Wait()
end


local tweenSpeedDropdown = 'Normal'

local tweenSpeedValues = {
    ['Slow'] = 62.5,
    ['Normal'] = 125,
    ['Fast'] = 250,
    ['Max'] = 500
}


tweenSpeedDropdown = 'Normal'

local function getTweenSpeed()
    local val = tweenSpeedValues[tweenSpeedDropdown]
    if not val then
        warn("[Steal] Invalid tween speed selection:", tweenSpeedDropdown)
        tweenSpeedDropdown = 'Normal'
        val = tweenSpeedValues[tweenSpeedDropdown]
    end
    return val
end


local function pathfindToPosition(targetPos)
    local hrp = player.Character and player.Character:FindFirstChild('HumanoidRootPart')
    if not hrp then return false end
    local path = PathfindingService:CreatePath()
    path:ComputeAsync(hrp.Position, targetPos)
    if path.Status ~= Enum.PathStatus.Success then
        return false
    end
    local waypoints = path:GetWaypoints()
    for i, waypoint in ipairs(waypoints) do
        if waypoint.Action == Enum.PathWaypointAction.Jump then
            humanoid.Jump = true
        end
        local tweenSpeed = getTweenSpeed()
local tweenInfo = TweenInfo.new((hrp.Position - waypoint.Position).Magnitude / tweenSpeed, Enum.EasingStyle.Linear)
        local targetPos = waypoint.Position + Vector3.new(0, 3, 0)
local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPos)})

        tween:Play()
        tween.Completed:Wait()
    end
    return true
end

local vim = game:GetService("VirtualInputManager")

local function holdProximityPrompt(prompt)
    if not prompt or not prompt:IsA("ProximityPrompt") then
        warn("[holdProximityPrompt] Invalid or missing prompt")
        return false
    end

    -- Force prompt usable
    prompt.Enabled = true
    prompt.RequiresLineOfSight = false
    prompt.MaxActivationDistance = 999

    -- Prevent input bugs
    local triggered = false
    local timeout = 5

    local conn = prompt.Triggered:Connect(function()
        triggered = true
    end)

    -- Use direct input hold APIs (NOT fireproximityprompt)
    local startTime = tick()
    prompt:InputHoldBegin()
    repeat
        task.wait(1.5)
    until triggered or (tick() - startTime > (prompt.HoldDuration + 1.5))

    prompt:InputHoldEnd()
    conn:Disconnect()

    return triggered
end


local function getDeliveryPosition()
    local myPlot = PlotController:GetMyPlot()
    if not myPlot then return nil end

    local uid = myPlot:GetUID()
    local plotModel = workspace.Plots:FindFirstChild(uid)
    if not plotModel then return nil end

    local hitbox = plotModel:FindFirstChild("DeliveryHitbox", true)
    return hitbox and hitbox.Position or nil
end

local stealBestEnabled = false
local stealMethod = 'Pathfinding'

local function findPromptNearPet(pet)
    local petPos = (pet:FindFirstChild("RootPart") or pet:FindFirstChildWhichIsA("BasePart")).Position
    local closestPrompt = nil
    local closestDist = math.huge

    for _, plot in ipairs(workspace.Plots:GetChildren()) do
        local podiums = plot:FindFirstChild("AnimalPodiums")
        if podiums then
            for _, podium in ipairs(podiums:GetChildren()) do
                local prompt = podium:FindFirstChildWhichIsA("ProximityPrompt", true)

                if prompt then
                    local attachment = prompt.Parent
                    local pos = attachment:IsA("Attachment") and attachment.WorldPosition or nil
                    if pos then
                        local dist = (petPos - pos).Magnitude
                        if dist < closestDist then
                            closestDist = dist
                            closestPrompt = prompt
                        end
                    end
                end
            end
        end
    end

    return closestPrompt
end


local function stealLoop()
    while stealBestEnabled do
        local highest, bestGen = nil, -1
        for _, m in ipairs(workspace:GetChildren()) do
            if isBasePet(m) then
                local g = GEN[m.Name]
                if g and g > bestGen then
                    bestGen = g
                    highest = m
                end
            end
        end
        if highest then
            local rootPart = highest:FindFirstChild('RootPart') or highest:FindFirstChildWhichIsA('BasePart')
            if rootPart then
                local prompt = findPromptNearPet(highest)

                local successTween = false
                successTween = pathfindToPosition(rootPart.Position)

                if not successTween then
                    task.wait(0.5)
                    continue
                end

                local hrp = player.Character and player.Character:FindFirstChild('HumanoidRootPart')
                if prompt and hrp then
                    print("[DEBUG] Moving to", rootPart.Name)
                    repeat
                        task.wait(0.05)
                    until (hrp.Position - rootPart.Position).Magnitude <= 3

                    print("[DEBUG] Reached target. Triggering prompt.")
                    if not prompt.Enabled then
                        task.wait(0.5)
                        continue
                    end
                    if not prompt then
                        warn("[DEBUG] ❌ No ProximityPrompt found in", rootPart:GetFullName())
                    elseif not prompt:IsA("ProximityPrompt") then
                        warn("[DEBUG] ❌ Object found is not a ProximityPrompt:", prompt.ClassName)
                    else
                        print("[DEBUG] ✅ Prompt object located at", prompt:GetFullName(), "| Enabled:", prompt.Enabled)
                    end

                    if not hrp then
                        warn("[DEBUG] ❌ HumanoidRootPart not found.")
                    end

                    local skyTweenDone = false
                    if not skyTweenDone then
                        local triggered = holdProximityPrompt(prompt)
                        print("[DEBUG] Prompt fully held and triggered:", triggered)

                        if triggered then
                            skyTweenDone = true
                            local deliveryPos = getDeliveryPosition()
if deliveryPos then
    local pathSuccess = pathfindToPosition(deliveryPos)
    if not pathSuccess then
        tweenToPosition(deliveryPos, tweenSpeedValues.Max)
    end
    task.wait(0.5)
end

                    end
                end
            end
        end
        task.wait(0.1)
    end
end
    end

StealTab:CreateToggle({
    Name = 'Steal Best',
    CurrentValue = false,
    Flag = 'StealBest',
    Callback = function(value)
        stealBestEnabled = value
        if value then
            task.spawn(stealLoop)
        end
    end
})

StealTab:CreateDropdown({
    Name = 'Method',
    Options = { 'Pathfinding' },
    CurrentOption = 'Pathfinding',
    Flag = 'StealMethod',
    Callback = function(option)
        stealMethod = option
    end
})

StealTab:CreateDropdown({
    Name = 'Tween Speed',
    Options = { 'Slow', 'Normal', 'Fast', 'Max' },
    CurrentOption = 'Normal',
    Flag = 'TweenSpeed',
    Callback = function(option)
        if typeof(option) == "string" then
            tweenSpeedDropdown = option
        elseif typeof(option) == "table" then
            for _, v in pairs(option) do
                if typeof(v) == "string" then
                    tweenSpeedDropdown = v
                    return
                end
            end
            warn("[Steal] Unknown tweenSpeedDropdown format:", option)
        else
            warn("[Steal] Unexpected dropdown type:", typeof(option))
        end
    end
})


-- add below existing StealTab toggles/dropdowns

local testStealEnabled = false

local function testStealLoop()
    while testStealEnabled do
        local closestPet = nil
        local closestDist = math.huge
        local character = player.Character
        local hrp = character and character:FindFirstChild('HumanoidRootPart')
        if not hrp then task.wait(0.5) continue end

        for _, m in ipairs(workspace:GetChildren()) do
            if isBasePet(m) then
                local rootPart = m:FindFirstChild('RootPart') or m:FindFirstChildWhichIsA('BasePart')
                if rootPart then

                    local dist = (hrp.Position - rootPart.Position).Magnitude
                    if dist < closestDist then
                        closestDist = dist
                        closestPet = m
                    end
                end
            end
        end

        if closestPet then
            local rootPart = closestPet:FindFirstChild('RootPart') or closestPet:FindFirstChildWhichIsA('BasePart')
            if rootPart then





                local successTween = false
                successTween = pathfindToPosition(rootPart.Position)
                if not successTween then
                    task.wait(0.5)
                    continue
                end
                local distThreshold = 4
                

local prompt = findPromptNearPet(closestPet)




if prompt and hrp then
    print("[DEBUG] Moving to", rootPart.Name)
    repeat
        task.wait(0.05)
        print("[DEBUG] Distance:", (hrp.Position - rootPart.Position).Magnitude)
    until (hrp.Position - rootPart.Position).Magnitude <= 3

if not prompt.Enabled then
    task.wait(0.5)
    continue
end
if not prompt then
    warn("[DEBUG] ❌ No ProximityPrompt found in", rootPart:GetFullName())
elseif not prompt:IsA("ProximityPrompt") then
    warn("[DEBUG] ❌ Object found is not a ProximityPrompt:", prompt.ClassName)
else
    print("[DEBUG] ✅ Prompt object located at", prompt:GetFullName(), "| Enabled:", prompt.Enabled)
end

if not hrp then
    warn("[DEBUG] ❌ HumanoidRootPart not found.")
end

local triggered = holdProximityPrompt(prompt)


                        if triggered then
                            local deliveryPos = getDeliveryPosition()
if deliveryPos then
    local pathSuccess = pathfindToPosition(deliveryPos)
    if not pathSuccess then
        tweenToPosition(deliveryPos, tweenSpeedValues.Max)
    end
    task.wait(0.5)
end

                    end
                end
            end
        end
        task.wait(0.1)
    end
    end
StealTab:CreateToggle({
    Name = 'Test Steal Closest',
    CurrentValue = false,
    Flag = 'TestStealClosest',
    Callback = function(value)
        testStealEnabled = value
        if value then
            task.spawn(testStealLoop)
        end
    end
})

MovementTab:CreateToggle({
    Name = 'Bypass Speed (Uses Speed Coil Gear)',
    CurrentValue = false,
    Flag = 'BypassSpeed',
    Callback = function(value)
        bypassSpeedEnabled = value
        if not value then
            coilEquipped = false
        end
    end,
})
MovementTab:CreateSlider({
    Name = 'Speed Value',
    Range = { 75, 450 },
    Increment = 1,
    Suffix = 'speed',
    CurrentValue = 105,
    Flag = 'BypassSpeedValue',
    Callback = function(val)
        bypassSpeedValue = val
    end,
})

VisualsTab:CreateToggle({
    Name = 'Highest Gen Brainrot ESP',
    CurrentValue = false,
    Flag = 'BrainrotESP',
    Callback = function(v)
        if v then
            enableESP()
        else
            disableESP()
        end
    end,
})
VisualsTab:CreateToggle({
    Name = 'Player ESP',
    CurrentValue = false,
    Flag = 'PlayerESP',
    Callback = function(v)
        if v then
            enablePlayerESP()
        else
            disablePlayerESP()
        end
    end,
})

local buyRemote =
    game:GetService('ReplicatedStorage').Packages.Net['RF/CoinsShopService/RequestBuy']

local shopItems = {
    'Slap',
    'Speed Coil',
    'Trap',
    'Iron Slap',
    'Gravity Coil',
    'Bee Launcher',
    'Gold Slap',
    'Coil Combo',
    'Rage Table',
    'Diamond Slap',
    'Grapple Hook',
    'Taser Gun',
    'Emerald Slap',
    'Invisibility Cloak',
    'Boogie Bomb',
    'Ruby Slap',
    "Medusa's Head",
    'Dark Matter Slap',
    'Web Slinger',
    'Flame Slap',
    'Quantum Cloner',
    'All Seeing Sentry',
    'Nuclear Slap',
    'Rainbowrath Sword',
    'Galaxy Slap',
    'Laser Cape',
    'Glitched Slap',
    'Body Swap Potion',
    'Splatter Slap',
    'Paintball Gun',
}

local priorityOrder =
    {
        'Invisibility Cloak',
        'Quantum Cloner',
        "Medusa's Head",
    }

table.sort(shopItems, function(a, b)
    local aIndex = table.find(priorityOrder, a)
    local bIndex = table.find(priorityOrder, b)
    if aIndex and bIndex then
        return aIndex < bIndex
    elseif aIndex then
        return true
    elseif bIndex then
        return false
    else
        return a < b
    end
end)

local buyAllToggle = nil
local buyingAll = false

local function buyItem(itemName)
    local success, result = pcall(function()
        return buyRemote:InvokeServer(itemName)
    end)
    print('Bought', itemName, 'Success:', success, 'Result:', result)
end

buyAllToggle = ShopTab:CreateToggle({
    Name = 'Buy All Items',
    CurrentValue = false,
    Flag = 'BuyAllItems',
    Callback = function(value)
        buyingAll = value
        if buyingAll then
            spawn(function()
                for _, itemName in ipairs(shopItems) do
                    if not buyingAll then
                        break
                    end
                    buyItem(itemName)
                    wait()
                end
                buyAllToggle:Set(false)
                buyingAll = false
            end)
        end
    end,
})

for _, itemName in ipairs(shopItems) do
    ShopTab:CreateButton({
        Name = 'Buy ' .. itemName,
        Callback = function()
            buyItem(itemName)
        end,
    })
end
