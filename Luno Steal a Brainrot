local GUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/basedgooner/Luno-V2/refs/heads/main/Luno%20V2"))()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local buyRemote = ReplicatedStorage.Packages.Net["RF/CoinsShopService/RequestBuy"]

local AnimalsModule = require(ReplicatedStorage.Datas.Animals)
local TraitsModule = require(ReplicatedStorage.Datas.Traits)
local GameModule = require(ReplicatedStorage.Shared.Game)

require(ReplicatedStorage.Controllers:WaitForChild("CharacterController"))
local charController = require(ReplicatedStorage.Controllers:WaitForChild("CharacterController"))
charController.update = function() end

local PlotController
pcall(function()
    PlotController = require(ReplicatedStorage.Controllers:WaitForChild("PlotController", 2))
end)

local window = GUI:CreateWindow("Steal A Brainrot")
local stealPage = window:CreatePage("Steal")
local page = window:CreatePage("Movement")
local visualsPage = window:CreatePage("Visuals")
local shopPage = window:CreatePage("Shop")
local autoBuyPage = window:CreatePage("Auto Buy")

-- Movement variables
local speedBypassEnabled = false
local speedBypassMode = "Fast"
local normalWalkSpeed = 25
local infiniteJumpEnabled = false
local walkspeedConnection = nil
local currentTargetSpeed = 16

-- Pathfinding & ESP variables
local pathfindingEnabled = false
local pathfindingCoroutine = nil
local notifiedThresholds = {}

-- Auto Buy variables
local featureEnabled = false
local BaseLerpSpeed = 0.2
local LerpSpeed = BaseLerpSpeed
local HeightOffset = 3
local DelayBetweenPurchases = 0
local WaypointDistanceThreshold = 1.5
local autoBuySpeedMode = "Normal"
local SelectedAnimals = {}

-- Steal page variables
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")
local random = Random.new()
local teleporting
local tpAmt

task.spawn(function()
    while true do
        local ping = player:GetNetworkPing() * 1000
        tpAmt = math.clamp(math.floor(ping * 0.8), 10, 150)
        RunService.Heartbeat:Wait()
    end
end)

local function TP(position)
    if not teleporting then
        teleporting = true
        if typeof(position) == "CFrame" then
            hrp.CFrame = position + Vector3.new(
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001)
            )
            RunService.Heartbeat:Wait()
            teleporting = false
        end
    end
end

local function FindDelivery()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox then return hitbox end
            end
        end
    end
end

local function DeliverBrainrot()
    local hitbox = FindDelivery()
    if not hitbox then
        window:Notify("Error: DeliveryHitbox not found", "danger")
        return
    end
    local target = hitbox.CFrame * CFrame.new(0, -3, 0)
    local void = CFrame.new(0, -50000, 0)
    local i = 0
    while i < (tpAmt or 70) do TP(target) i += 1 end
    for _ = 1, 2 do TP(void) end
    i = 0
    while i < (tpAmt / 16) do TP(target) i += 1 end
    task.wait(1)
    local distance = (hrp.Position - target.Position).Magnitude
    if distance <= 30 then window:Notify("Teleport Succeeded!", "success") else window:Notify("Teleport Failed: Too far (" .. math.floor(distance) .. ")", "danger") end
end

local function TPNearestBase()
    local plotsFolder = workspace:FindFirstChild("Plots")
    if not plotsFolder then window:Notify("Error: Plots folder not found", "danger") return end
    local closestBrainrot, shortestDistance = nil, math.huge
    for _, plot in pairs(plotsFolder:GetChildren()) do
        local plotSign = plot:FindFirstChild("PlotSign")
        if plotSign then
            local plotSignText = plotSign:FindFirstChild("SurfaceGui"):FindFirstChild("Frame"):FindFirstChild("TextLabel")
            if plotSignText and plotSignText.ContentText ~= "Empty Base" then
                local yourBase = plotSign:FindFirstChild("YourBase")
                if yourBase and not yourBase.Enabled then
                    local podiums = plot:FindFirstChild("AnimalPodiums")
                    if podiums then
                        for _, brainrot in pairs(podiums:GetChildren()) do
                            if brainrot:IsA("Model") and brainrot:FindFirstChild("Base"):FindFirstChild("Spawn") then
                                local brainrotSpawn, distance = brainrot.Base.Spawn, (brainrot.Base.Spawn.Position - hrp.Position).Magnitude
                                if distance < shortestDistance then shortestDistance, closestBrainrot = distance, brainrotSpawn end
                            end
                        end
                    end
                end
            end
        end
    end
    if not closestBrainrot then window:Notify("Error: No valid podium found", "danger") return end
    local target = closestBrainrot.CFrame * CFrame.new(0, 2, 0)
    local void = CFrame.new(0, -100000, 0)
    local i = 0
    while i < (tpAmt or 70) do TP(target) i += 1 end
    for _ = 1, 2 do TP(void) end
    i = 0
    while i < (tpAmt / 16) do TP(target) i += 1 end
    task.wait(1)
    local distance = (hrp.Position - target.Position).Magnitude
    if distance <= 30 then window:Notify("Teleport Succeeded!", "success") else window:Notify("Teleport Failed: Too far (" .. math.floor(distance) .. ")", "danger") end
end

stealPage:CreateButton("TP to Delivery Box", DeliverBrainrot)
stealPage:CreateButton("TP Inside Nearest Base", TPNearestBase)

-- Movement and Utility Functions
UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled and player.Character then
        local hum = player.Character:FindFirstChildOfClass("Humanoid")
        if hum and hum:GetState() ~= Enum.HumanoidStateType.Seated then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
    end
end)

local function spoofItem(itemName)
    local backpack = player:FindFirstChild("Backpack"); local char = player.Character
    if not (backpack and char) then return end
    local item = backpack:FindFirstChild(itemName) or char:FindFirstChild(itemName)
    if not item then pcall(function() return buyRemote:InvokeServer(itemName) end); item = backpack:WaitForChild(itemName, 2) end
    if not item then return end
    item.Parent = char
    task.wait(0.15)
    if item:IsA("Tool") then for i = 1, 2 do pcall(function() item:Activate() end); task.wait(0.1) end end
    task.wait(0.15)
    item.Parent = backpack
end

local function findAndEquipItem(itemName, activate)
    local backpack = player:FindFirstChild("Backpack"); local char = player.Character
    if not (backpack and char) then return false end
    local item = backpack:FindFirstChild(itemName) or char:FindFirstChild(itemName)
    if not item then window:Notify("Purchasing "..itemName, "info"); pcall(function() return buyRemote:InvokeServer(itemName) end); task.wait(0.5); item = backpack:WaitForChild(itemName, 0.2) end
    if not item then window:Notify(itemName.." not found after purchase attempt.", "warning"); return false end
    if item.Parent ~= char then item.Parent = char; task.wait(0.1) end
    if activate and item:IsA("Tool") then pcall(function() item:Activate() end) end
    return true
end

local function unequipItem(itemName)
    local backpack = player:FindFirstChild("Backpack"); local char = player.Character
    if not (backpack and char) then return end
    local item = char:FindFirstChild(itemName)
    if item then item.Parent = backpack end
end

local function manageSpeed()
    local char = player.Character
    if not char then if walkspeedConnection then walkspeedConnection:Disconnect() end; return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid then if walkspeedConnection then walkspeedConnection:Disconnect() end; return end

    if not speedBypassEnabled then
        currentTargetSpeed = normalWalkSpeed
    else
        if speedBypassMode == "Fast" then
            currentTargetSpeed = 72
            spoofItem("Speed Coil")
        elseif speedBypassMode == "Max" then
            currentTargetSpeed = 108
            spoofItem("Invisibility Cloak")
        end
    end
    
    if walkspeedConnection then walkspeedConnection:Disconnect(); walkspeedConnection = nil end
    
    humanoid.WalkSpeed = currentTargetSpeed
    
    walkspeedConnection = humanoid.Changed:Connect(function(prop)
        if prop == "WalkSpeed" and humanoid.WalkSpeed ~= currentTargetSpeed then
            humanoid.WalkSpeed = currentTargetSpeed
        end
    end)
end

local function onCharacterAdded(character)
    character:WaitForChild("Humanoid")
    manageSpeed()
end

local function toggleCharacterController(state)
    local controller = require(ReplicatedStorage.Controllers:WaitForChild("CharacterController"))
    if state then controller.update = function() end else controller.update = nil; require(ReplicatedStorage.Controllers:WaitForChild("CharacterController")) end
end

-- Create Movement GUI
page:CreateToggle("Enable Speed Bypass", false, function(state)
    speedBypassEnabled = state
    manageSpeed()
end)

page:CreateDropdown("Bypass Mode", {"Fast", "Max"}, "Fast", function(value)
    speedBypassMode = value
    manageSpeed()
end)

page:CreateSlider("Normal Walk Speed", 16, 75, normalWalkSpeed, function(v)
    normalWalkSpeed = v
    manageSpeed()
end)

page:CreateToggle("Infinite Jump", false, function(state)
    infiniteJumpEnabled = state
    toggleCharacterController(state)
end)

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then onCharacterAdded(player.Character) end

-- ESP, Pathfinding, and Visuals
local espEnabled = false
local isPetScanRunning = false
local highestGenAnimal = nil
local currentTargetPlot = nil
local transparencyConnections = {}

local INTERVAL = 0.25
local ALL_ANIMAL_NAMES = {
    ["Noobini Pizzanini"] = true, ["Lirilì Larilà"] = true, ["Tim Cheese"] = true, ["Fluriflura"] = true, ["Svinina Bombardino"] = true, ["Talpa Di Fero"] = true,
    ["Pipi Kiwi"] = true, ["Trippi Troppi"] = true, ["Tung Tung Tung Sahur"] = true, ["Gangster Footera"] = true, ["Boneca Ambalabu"] = true, ["Ta Ta Ta Ta Sahur"] = true,
    ["Tric Trac Baraboom"] = true, ["Bandito Bobritto"] = true, ["Cacto Hipopotamo"] = true, ["Cappuccino Assassino"] = true, ["Brr Brr Patapim"] = true,
    ["Trulimero Trulicina"] = true, ["Bananita Dolphinita"] = true, ["Brri Brri Bicus Dicus Bombicus"] = true, ["Bambini Crostini"] = true, ["Perochello Lemonchello"] = true,
    ["Burbaloni Loliloli"] = true, ["Chimpanzini Bananini"] = true, ["Ballerina Cappuccina"] = true, ["Chef Crabracadabra"] = true, ["Glorbo Fruttodrillo"] = true,
    ["Blueberrinni Octopusini"] = true, ["Lionel Cactuseli"] = true, ["Pandaccini Bananini"] = true, ["Frigo Camelo"] = true, ["Orangutini Ananassini"] = true,
    ["Bombardiro Crocodilo"] = true, ["Bombombini Gusini"] = true, ["Rhino Toasterino"] = true, ["Cavallo Virtuoso"] = true, ["Spioniro Golubiro"] = true,
    ["Zibra Zubra Zibralini"] = true, ["Tigrilini Watermelini"] = true, ["Cocofanto Elefanto"] = true, ["Tralalero Tralala"] = true, ["Odin Din Din Dun"] = true,
    ["Girafa Celestre"] = true, ["Gattatino Nyanino"] = true, ["Trenostruzzo Turbo 3000"] = true, ["Matteo"] = true, ["Tigroligre Frutonni"] = true, ["Orcalero Orcala"] = true,
    ["Statutino Libertino"] = true, ["Gattatino Neonino"] = true, ["La Vacca Saturno Saturnita"] = true, ["Los Tralaleritos"] = true, ["Graipuss Medussi"] = true,
    ["La Grande Combinasion"] = true, ["Chimpanzini Spiderini"] = true, ["Garama and Madundung"] = true, ["Torrtuginni Dragonfrutini"] = true, ["Las Tralaleritas"] = true,
    ["Pot Hotspot"] = true, ["Mythic Lucky Block"] = true, ["Brainrot God Lucky Block"] = true, ["Secret Lucky Block"] = true,
}

local function getPlotFromPosition(pos)
    if typeof(pos) ~= "Vector3" then
        if pos:IsA("Model") then local root = pos:FindFirstChild("RootPart") or pos:FindFirstChildWhichIsA("BasePart"); if not root then return nil end; pos = root.Position
        elseif pos:IsA("BasePart") then pos = pos.Position else return nil end
    end
    local plotsFolder = workspace:FindFirstChild("Plots"); if not plotsFolder then return nil end
    local closestPlot, shortestDist = nil, math.huge
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        local podiums = plot:FindFirstChild("AnimalPodiums")
        if podiums then
            for _, podium in ipairs(podiums:GetChildren()) do
                local base = podium:FindFirstChild("Base"); local spawn = base and base:FindFirstChild("Spawn")
                if spawn and spawn:IsA("BasePart") then local dist = (spawn.Position - pos).Magnitude; if dist < shortestDist then shortestDist, closestPlot = dist, plot end end
            end
        end
    end
    return closestPlot
end

local function getMyPlot()
    local ok, result = pcall(function() return PlotController:GetMyPlot() end)
    if not ok or not result then return nil end
    local plotModel = result and result.PlotModel
    return typeof(plotModel) == "Instance" and plotModel or nil
end

local function isInEnemyPlot(model)
    local myPlot = getMyPlot()
    if not myPlot then return true end
    return not myPlot:IsAncestorOf(model)
end

local function isBasePet(m) return m:IsA("Model") and ALL_ANIMAL_NAMES[m.Name] end

local function clearPetESP() for _, m in ipairs(workspace:GetDescendants()) do if m.Name == "PetESP" or m.Name == "PetESP_Label" then m:Destroy() end end end

local function startRainbow(obj, prop)
    local cycleTime = 4
    task.spawn(function() while obj and obj.Parent do local h = (tick() % cycleTime) / cycleTime; obj[prop] = Color3.fromHSV(h, 1, 1); RunService.Heartbeat:Wait() end end)
end

local function formatNumber(n) return tostring(n):reverse():gsub('%d%d%d', '%1,'):reverse():gsub('^,', '') end

local HttpService = game:GetService("HttpService")
local MutationsModule = require(ReplicatedStorage.Datas.Mutations)

local function getTraitMultiplier(model)
    local traitSource = model:FindFirstChild("Instance") or model; local traitJson = traitSource:GetAttribute("Traits")
    if not traitJson then return 1 end
    local success, traitList = pcall(function() return HttpService:JSONDecode(traitJson) end)
    if not success or typeof(traitList) ~= "table" then return 1 end
    local mult = 1
    for _, traitName in ipairs(traitList) do local trait = TraitsModule[traitName]; if trait and trait.MultiplierModifier then mult *= trait.MultiplierModifier end end
    return mult
end

local function getMutationMultiplier(model)
    local mutation = model:GetAttribute("Mutation"); if not mutation then return 1 end
    local data = MutationsModule[mutation]; return (data and data.MultiplierModifier) or 1
end

local function getFinalGeneration(model)
    local animalData = AnimalsModule[model.Name]; if not animalData then return 0 end
    local baseGen, traitMult, mutationMult = animalData.Generation or 0, getTraitMultiplier(model), getMutationMultiplier(model)
    return math.round(baseGen * traitMult * mutationMult), baseGen, traitMult, mutationMult
end

local function attachPetESP(m, g)
    local root = m:FindFirstChild("RootPart") or m:FindFirstChildWhichIsA("BasePart"); if not root then return end
    local hl = Instance.new('Highlight'); hl.Name = "PetESP"; hl.Adornee = m; hl.OutlineColor = Color3.new(0, 0, 0); hl.FillTransparency = 0.25; hl.OutlineTransparency = 0; hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop; hl.Parent = m
    startRainbow(hl, "FillColor"); startRainbow(hl, "OutlineColor")
    local gui = Instance.new('BillboardGui'); gui.Name = "PetESP_Label"; gui.Adornee = root; gui.AlwaysOnTop = true; gui.Size = UDim2.new(0, 400, 0, 80); gui.StudsOffset = Vector3.new(0, 6.5, 0); gui.Parent = m
    local n = Instance.new('TextLabel'); n.Size = UDim2.new(1, 0, 0.5, 0); n.Position = UDim2.new(0.5, 0, 0.35, 0); n.AnchorPoint = Vector2.new(0.5, 0.5); n.BackgroundTransparency = 1; n.Font = Enum.Font.GothamBlack; n.TextSize = 22; n.Text = m.Name:upper(); n.TextXAlignment = Enum.TextXAlignment.Center; n.Parent = gui
    local ns = Instance.new('UIStroke'); ns.Thickness = 4.5; ns.Color = Color3.new(0, 0, 0); ns.Parent = n
    local nso = Instance.new('UIStroke'); nso.Thickness = 5.5; nso.Color = Color3.new(1, 1, 1); nso.Parent = n
    local gL = Instance.new('TextLabel'); gL.Size = UDim2.new(1, 0, 0.5, 0); gL.Position = UDim2.new(0.5, 0, 0.75, 0); gL.AnchorPoint = Vector2.new(0.5, 0.5); gL.BackgroundTransparency = 1; gL.Font = Enum.Font.GothamBlack; gL.TextSize = 32; gL.Text = '$' .. formatNumber(g) .. '/s'; gL.TextXAlignment = Enum.TextXAlignment.Center; gL.Parent = gui
    local gs = Instance.new('UIStroke'); gs.Thickness = 6; gs.Color = Color3.new(0, 0, 0); gs.Parent = gL
    local gso = Instance.new('UIStroke'); gso.Thickness = 7; gso.Color = Color3.new(1, 1, 1); gso.Parent = gL
    startRainbow(n, 'TextColor3'); startRainbow(gL, 'TextColor3')
end

local function stopPlotMonitoring() for _, conn in ipairs(transparencyConnections) do conn:Disconnect() end; table.clear(transparencyConnections); table.clear(notifiedThresholds); currentTargetPlot = nil end

local function setupPlotMonitoring(plotModel)
    stopPlotMonitoring(); currentTargetPlot = plotModel; if not plotModel then return end
    local timeLabel; pcall(function() timeLabel = plotModel:WaitForChild("Purchases", 2):WaitForChild("PlotBlock", 2):WaitForChild("Main", 2):WaitForChild("BillboardGui", 2):WaitForChild("RemainingTime", 2) end)
    if timeLabel then
        local lastText = ""; local conn = RunService.Heartbeat:Connect(function()
            if not timeLabel or not timeLabel.Parent then return end
            local current = timeLabel.Text; if current ~= lastText then lastText = current; local num = tonumber(current:match("(%d+)")); if num then for t = 200, 10, -10 do if num <= t and not notifiedThresholds[t] then notifiedThresholds[t] = true; break end end end end
        end); table.insert(transparencyConnections, conn)
    end
end

local function pathfindLoop()
    while pathfindingEnabled and task.wait(1) do
        local char, humanoid, hrp = player.Character, char and char:FindFirstChildOfClass("Humanoid"), char and char:FindFirstChild("HumanoidRootPart")
        if not (humanoid and hrp and highestGenAnimal) then continue end
        local targetRoot = highestGenAnimal:FindFirstChild("RootPart") or highestGenAnimal:FindFirstChildWhichIsA("BasePart"); if not targetRoot then continue end
        local path = PathfindingService:CreatePath(); local destination = targetRoot.Position - (targetRoot.CFrame.LookVector * 8)
        local success, err = pcall(function() path:ComputeAsync(hrp.Position, destination) end)
        if not success or path.Status ~= Enum.PathStatus.Success then continue end
        for _, waypoint in ipairs(path:GetWaypoints()) do if not pathfindingEnabled then break end; humanoid:MoveTo(waypoint.Position); humanoid.MoveToFinished:Wait(2) end
    end
end

local function runPetScanLoop()
    if isPetScanRunning then return end; isPetScanRunning = true
    while espEnabled or pathfindingEnabled do
        local highest, bestGen = nil, -1
        for _, m in ipairs(workspace:GetChildren()) do
            if isBasePet(m) and isInEnemyPlot(m) then local g = getFinalGeneration(m); if g > bestGen then bestGen, highest = g, m end end
        end
        highestGenAnimal = highest
        if highest then local plot = getPlotFromPosition(highest); if plot and plot ~= currentTargetPlot then setupPlotMonitoring(plot) end end
        if espEnabled then clearPetESP(); if highest then attachPetESP(highest, bestGen) end else clearPetESP() end
        task.wait(INTERVAL)
    end
    clearPetESP(); stopPlotMonitoring(); highestGenAnimal = nil; isPetScanRunning = false
end

page:CreateToggle("Tween Behind Highest Gen", false, function(state)
    pathfindingEnabled = state
    if state then
        task.spawn(function() findAndEquipItem("Invisibility Cloak", true) end)
        if not isPetScanRunning then task.spawn(runPetScanLoop) end
        pathfindingCoroutine = task.spawn(pathfindLoop)
    else
        if pathfindingCoroutine then task.cancel(pathfindingCoroutine); pathfindingCoroutine = nil end
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid:MoveTo(humanoid.RootPart.Position) end
        unequipItem("Invisibility Cloak")
    end
end)

-- Shop Page
local shopItems = { 'Slap', 'Speed Coil', 'Trap', 'Iron Slap', 'Gravity Coil', 'Bee Launcher', 'Gold Slap', 'Coil Combo', 'Rage Table', 'Diamond Slap', 'Grapple Hook', 'Taser Gun', 'Emerald Slap', 'Invisibility Cloak', 'Boogie Bomb', 'Ruby Slap', "Medusa's Head", 'Dark Matter Slap', 'Web Slinger', 'Flame Slap', 'Quantum Cloner', 'All Seeing Sentry', 'Nuclear Slap', 'Rainbowrath Sword', 'Galaxy Slap', 'Laser Cape', 'Glitched Slap', 'Body Swap Potion', 'Splatter Slap', 'Paintball Gun' }
local priorityOrder = { 'Invisibility Cloak', 'Quantum Cloner', "Medusa's Head" }
table.sort(shopItems, function(a, b) local aIndex, bIndex = table.find(priorityOrder, a), table.find(priorityOrder, b); if aIndex and bIndex then return aIndex < bIndex elseif aIndex then return true elseif bIndex then return false else return a < b end end)
local buyingAll = false
local buyAllToggle = shopPage:CreateToggle("Buy All Items", false, function(value)
    buyingAll = value
    if buyingAll then
        task.spawn(function()
            for _, itemName in ipairs(shopItems) do
                if not buyingAll then break end
                local success, result = pcall(function() return buyRemote:InvokeServer(itemName) end)
                if success then window:Notify("Bought " .. itemName, "success") else window:Notify("Failed: " .. itemName, "danger") end; task.wait(0.5)
            end
            buyAllToggle:Set(false); buyingAll = false
        end)
    end
end)
for _, itemName in ipairs(shopItems) do shopPage:CreateButton("Buy " .. itemName, function() local s, r = pcall(function() return buyRemote:InvokeServer(itemName) end); if s then window:Notify("Bought "..itemName,"success") else window:Notify("Failed: "..itemName,"danger") end end) end

-- Visuals Page
local plotTimers_Enabled, plotTimers_Coroutine, plotTimers_RenderConnections, plotTimers_OriginalProperties = false, nil, {}, {}
local function disablePlotTimers()
    plotTimers_Enabled = false; if plotTimers_Coroutine then task.cancel(plotTimers_Coroutine); plotTimers_Coroutine = nil end
    for _, conn in pairs(plotTimers_RenderConnections) do pcall(function() conn:Disconnect() end) end; table.clear(plotTimers_RenderConnections)
    for label, props in pairs(plotTimers_OriginalProperties) do
        pcall(function() if label and label.Parent then local bb = label:FindFirstAncestorWhichIsA("BillboardGui"); if bb and bb.Parent then bb.Enabled, bb.AlwaysOnTop, bb.Size, bb.MaxDistance = props.bb_enabled, props.bb_alwaysOnTop, props.bb_size, props.bb_maxDistance; label.TextScaled, label.TextWrapped, label.AutomaticSize, label.Size, label.TextSize = props.label_textScaled, props.label_textWrapped, props.label_automaticSize, props.label_size, props.label_textSize end end end)
    end
end
local function enablePlotTimers()
    disablePlotTimers(); plotTimers_Enabled = true
    plotTimers_Coroutine = task.spawn(function()
        local camera = workspace.CurrentCamera; local DISTANCE_THRESHOLD, SCALE_START, SCALE_RANGE, MIN_TEXT_SIZE, MAX_TEXT_SIZE = 45, 100, 300, 30, 36
        while plotTimers_Enabled do
            pcall(function() for _, label in ipairs(workspace.Plots:GetDescendants()) do if label:IsA("TextLabel") and label.Name == "RemainingTime" then if plotTimers_RenderConnections[label] then continue end; local bb = label:FindFirstAncestorWhichIsA("BillboardGui"); if not bb then continue end; local model = bb:FindFirstAncestorWhichIsA("Model"); if not model then continue end; local basePart = model:FindFirstChildWhichIsA("BasePart", true); if not basePart then continue end; if not plotTimers_OriginalProperties[label] then plotTimers_OriginalProperties[label] = { bb_enabled = bb.Enabled, bb_alwaysOnTop = bb.AlwaysOnTop, bb_size = bb.Size, bb_maxDistance = bb.MaxDistance, label_textScaled = label.TextScaled, label_textWrapped = label.TextWrapped, label_automaticSize = label.AutomaticSize, label_size = label.Size, label_textSize = label.TextSize, } end; bb.MaxDistance, bb.AlwaysOnTop, bb.ClipsDescendants, bb.Size, label.TextScaled, label.TextWrapped, label.ClipsDescendants, label.Size, label.AutomaticSize = 10000, true, false, UDim2.new(0, 300, 0, 150), false, true, false, UDim2.new(1, 0, 0, 32), Enum.AutomaticSize.Y; local conn = RunService.RenderStepped:Connect(function() if not basePart or not basePart.Parent or not bb or not bb.Parent then if plotTimers_RenderConnections[label] then plotTimers_RenderConnections[label]:Disconnect(); plotTimers_RenderConnections[label] = nil end; return end; local distance = (camera.CFrame.Position - basePart.Position).Magnitude; if distance > DISTANCE_THRESHOLD and basePart.Position.Y >= 0 then bb.Enabled = false; return end; bb.Enabled = true; local t = math.clamp((distance - SCALE_START) / SCALE_RANGE, 0, 1); label.TextSize = math.clamp(MIN_TEXT_SIZE + (MAX_TEXT_SIZE - MIN_TEXT_SIZE) * t, MIN_TEXT_SIZE, MAX_TEXT_SIZE); label.Size = UDim2.new(1, 0, 0, label.TextSize + 6) end); plotTimers_RenderConnections[label] = conn end end end)
            task.wait(1)
        end
    end)
end
local playerEspEnabled, espConns = false, {}
local function togglePlayerESP(state)
    playerEspEnabled = state; local function highlightChar(char) if not char or char:FindFirstChild("HighlightESP") then return end; local hl = Instance.new("Highlight"); hl.Name = "HighlightESP"; hl.FillTransparency = 0.75; hl.OutlineTransparency = 0.5; hl.FillColor = Color3.new(0, 0, 0); hl.OutlineColor = Color3.new(1, 1, 1); hl.Adornee = char; hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop; hl.Parent = char end
    if state then for _, plr in ipairs(Players:GetPlayers()) do if plr ~= player then highlightChar(plr.Character); table.insert(espConns, plr.CharacterAdded:Connect(highlightChar)) end end; table.insert(espConns, Players.PlayerAdded:Connect(function(p) table.insert(espConns, p.CharacterAdded:Connect(highlightChar)) end))
    else for _, plr in ipairs(Players:GetPlayers()) do local char = plr.Character; if char and char:FindFirstChild("HighlightESP") then char.HighlightESP:Destroy() end end; for _, conn in ipairs(espConns) do pcall(function() conn:Disconnect() end) end; table.clear(espConns) end
end
visualsPage:CreateToggle("Player ESP", true, togglePlayerESP); togglePlayerESP(true)
visualsPage:CreateToggle("Highest Gen Brainrot ESP", true, function(state) espEnabled = state; if state and not isPetScanRunning then task.spawn(runPetScanLoop) end end)
visualsPage:CreateToggle("View Plot Timers", false, function(state) if state then enablePlotTimers() else disablePlotTimers() end end)

-- Auto Buy Page
local animalPricePairs, nameToIndex = {}, {}
for animalName, data in pairs(AnimalsModule) do if type(data) == "table" and data.Price and not data.HideFromIndex then table.insert(animalPricePairs, {name = data.DisplayName, price = data.Price, index = animalName}); nameToIndex[data.DisplayName] = animalName end end
table.sort(animalPricePairs, function(a, b) return a.price < b.price end)
local priceStrings = {}
for _, pair in ipairs(animalPricePairs) do local formattedPrice = string.format("%s", string.gsub(tostring(pair.price), "(%d)(%d%d%d)$", "%1,%2")); table.insert(priceStrings, string.format("%s (%s)", pair.name, formattedPrice)) end
autoBuyPage:CreateDropdown("Speed Mode", {"Slow", "Normal", "Fast", "Speed MAX"}, "Normal", function(option) autoBuySpeedMode = option; if option == "Slow" then LerpSpeed = BaseLerpSpeed * 0.75 elseif option == "Normal" then LerpSpeed = BaseLerpSpeed elseif option == "Fast" then LerpSpeed = BaseLerpSpeed * 1.35; spoofItem("Speed Coil") elseif option == "Speed MAX" then LerpSpeed = BaseLerpSpeed * 1.5; spoofItem("Invisibility Cloak") end end)
autoBuyPage:CreateDropdown("Target Brainrot", priceStrings, priceStrings[1] or "None", function(values) SelectedAnimals = {}; for _, val in ipairs(values) do local animalName = string.match(val, "^(.+) %("); if animalName and nameToIndex[animalName] then table.insert(SelectedAnimals, nameToIndex[animalName]) end end end, "multi")
local function getTargetAnimal()
    local animalsFolder = workspace:FindFirstChild("MovingAnimals"); if not animalsFolder or #SelectedAnimals == 0 then return nil end
    local bestTarget, highestPrice = nil, -1
    for _, model in ipairs(animalsFolder:GetChildren()) do
        local root, attach, prompt, index = model:FindFirstChild("HumanoidRootPart"), root and root:FindFirstChild("PromptAttachment"), attach and attach:FindFirstChildOfClass("ProximityPrompt"), model:GetAttribute("Index")
        if not (root and attach and prompt) or prompt:GetAttribute("TargetPlayer") then continue end
        for _, selected in ipairs(SelectedAnimals) do if index == selected then local data = AnimalsModule[index]; if data and data.Price and data.Price > highestPrice then highestPrice, bestTarget = data.Price, { name = index, price = data.Price, prompt = prompt, root = root } end end end
    end
    return bestTarget
end
local function smoothMoveTo(position)
    local char, hrp = player.Character, char and char:FindFirstChild("HumanoidRootPart"); if not hrp then return end
    local targetCFrame = CFrame.new(position + Vector3.new(0, HeightOffset, 0))
    while featureEnabled do local currentCFrame = hrp.CFrame; local newCFrame = currentCFrame:Lerp(targetCFrame, LerpSpeed); hrp.CFrame = newCFrame; if (newCFrame.Position - targetCFrame.Position).Magnitude < WaypointDistanceThreshold then break end; RunService.Heartbeat:Wait() end
end
local function moveToTarget(targetPos)
    local char, humanoid, hrp = player.Character, char and char:FindFirstChildOfClass("Humanoid"), char and char:FindFirstChild("HumanoidRootPart"); if not (humanoid and hrp) then return end
    local path = PathfindingService:CreatePath({ AgentRadius = 2, AgentHeight = 5, AgentCanJump = true, AgentCanClimb = true }); path:ComputeAsync(hrp.Position, targetPos)
    if path.Status == Enum.PathStatus.Success then for _, waypoint in ipairs(path:GetWaypoints()) do if not featureEnabled then return end; smoothMoveTo(waypoint.Position) end end
end
autoBuyPage:CreateToggle("Auto Buy Selected", false, function(state)
    featureEnabled = state
    if state then task.spawn(function() while featureEnabled do local target = getTargetAnimal(); if target then moveToTarget(target.root.Position + Vector3.new(0, 0, 2)); task.wait(DelayBetweenPurchases); pcall(function() fireproximityprompt(target.prompt) end) end; task.wait(0.05) end end) end
end)

-- Initial run for ESP
espEnabled = true
task.spawn(runPetScanLoop)
